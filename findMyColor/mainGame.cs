/* mainGame.cs
 * 
 * This is main game form for this Application, 
 * that let's the user learn and play with colors.
 * 
 * Created By: Ankit Sadana
 * Created On: 11/29/2014
 * Last Modified By: Ankit Sadana
 * Last Modified On: 12/11/2014
 * 
 * IU Username: asadana
 * 
 * Final Project for A590
 * Part of: findMyColor Project
 */

// Libraries being used by this form
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

// Name of the project: findMyColor
namespace findMyColor
{
    // Main class for this form
    public partial class mainGame : Form
    {
        // Defining a string array of colors
        String[] colorString = { "Red", "Blue", "Green", "Yellow" };
        // Defining a temporary string that stores the color for the user to find
        String check;
        // Defining an int variable to keep track of correct color picks by the user
        int correctCount = 0;
        // A boolean variable is defined to manage form closing event
        bool blnConfirm = false;

        
        // Constructor function for this form
        public mainGame()
        {
            // Initializing the form
            InitializeComponent();
        }

        // ----- Form loading and closing functions -----

        // Function called when the form is loaded
        private void mainGame_Load(object sender, EventArgs e)
        {
            // Setting the Find label to empty
            lblFind.Text = "";
            // Making an object of the learnWindow form and passing colorString to the constructor
            learnWindow objLearnWindow = new learnWindow(colorString);
            // Opening the learnWindow form in modal mode to ensure user learns before continuing
            objLearnWindow.ShowDialog();
            // After the learnWindow form is closed, the objLearnWindow is detroyed to free memory
            objLearnWindow.Dispose();
            // fillColors is called to get the form ready for the game
            fillColors();
        }

        // Function called when the form is closing
        private void mainGame_FormClosing(object sender, FormClosingEventArgs e)
        {
            // If statement checks if the value of blnConfirm is false
            if(!blnConfirm)
            {
                // If statement displays a confirmation dialog before the application is closed
                if (MessageBox.Show("Are you sure you want to stop and leave?", "Confirming Exit",
                                        MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                {
                    // If the user selects no, form closing is canceled
                    e.Cancel = true;
                }
            }
        }

        // ----- Button click functions -----

        // Function called when "Stop Playing" is clicked
        private void btnQuit_Click(object sender, EventArgs e)
        {
            // Closes this form
            this.Close();
        }

        // Function called when the "Stop Playing" is clicked
        private void btnLearnColors_Click(object sender, EventArgs e)
        {
            // Object of overviewColors form is created and the colorString is passed to the constructor of that form
            overviewColors objOverviewColors = new overviewColors(colorString);
            // overviewColors form is displayed in modal mode
            objOverviewColors.ShowDialog();
            // After overviewColors form is closed, the objOverviewColors is destroyed to free memory
            objOverviewColors.Dispose();
        }

        // ----- The Game functions -----

        // Function called each time the game colors need to be redrawn randomly
        private void fillColors()
        {
            // Defining a variable od Random class
            Random randVar = new Random();
            // Defining a List of string type, with colorString
            var colorList = new List<string>(colorString);
            // Defining another List of string type to store randomized colorList
            var shuffle = new List<string>();
            // Defining an int variable to store random indices generated by randVar
            int randIndex = 0;

            /* For loop runs from length of colorList to 0
             * This loop creates random values between 0 to i, thereby shuffling the colorList based on random indices.
             * At the end the color used from colorList is removed, and the loop continues on remaining colors.
             * This ensures no color is repeated.
             */
            for (int i = colorList.Count; i > 0; --i)
            {
                // randIndex recieves a random value generated between 0 and i
                randIndex = randVar.Next(0, i);
                // randIndex-th member color of colorList is added to the shuffle list
                shuffle.Add(colorList[randIndex]);
                // The color added to the shuffle is removed from the colorList
                colorList.RemoveAt(randIndex);
            }
            
            // Defining a new string "colors"
            string[] colors = new string[4];
            // Defining an int variable index and setting it to 0, 
            // this stores the position of colors array.
            int index = 0;

            /* foreach loop traverses through shuffle
             * Each string in shuffle is stored into word, which is then stored into colors
             */
            foreach (string word in shuffle)
            {
                // word is stored to the colors array at the index-th position
                colors[index] = word;
                // index is incremented for each string stored
                index++;
            }

            // RandIndex is reused by setting the value to a random number between 0 and colorString length
            // This represents the position of the color that will be the objective for the user
            randIndex = randVar.Next(0, colorString.Length);
            // The randIndex-th member is stored into check, which keeps track of the objective color
            check = colorString[randIndex];

            // lblFind is updated to notify the objective "check" color
            lblFind.Text = "Find: " + check;

            // color1..color4's BackColor properties are set display the randomized string colors[]
            color1.BackColor = Color.FromName(colors[0]);
            color2.BackColor = Color.FromName(colors[1]);
            color3.BackColor = Color.FromName(colors[2]);
            color4.BackColor = Color.FromName(colors[3]);
        }

        // Function called when color1 pictureBox is clicked
        private void color1_Click(object sender, EventArgs e)
        {
            // If statement checks if the color in pictureBox is the same as color from check string
            if(color1.BackColor == Color.FromName(check))
            {
                // If the color matches, correctAnswer is called
                correctAnswer();
            }
            else
            {
                // If the color is different, wrongAnswer is called
                wrongAnswer();
            }

            // fillColors is called to redraw the game colors
            fillColors();
        }

        // Function called when color2 pictureBox is clicked
        private void color2_Click(object sender, EventArgs e)
        {
            // If statement checks if the color in pictureBox is the same as color from check string
            if (color2.BackColor == Color.FromName(check))
            {
                // If the color matches, correctAnswer is called
                correctAnswer();
            }
            else
            {
                // If the color is different, wrongAnswer is called
                wrongAnswer();
            }

            // fillColors is called to redraw the game colors
            fillColors();
        }

        // Function called when color3 pictureBox is clicked
        private void color3_Click(object sender, EventArgs e)
        {
            // If statement checks if the color in pictureBox is the same as color from check string
            if (color3.BackColor == Color.FromName(check))
            {
                // If the color matches, correctAnswer is called
                correctAnswer();
            }
            else
            {
                // If the color is different, wrongAnswer is called
                wrongAnswer();
            }

            // fillColors is called to redraw the game colors
            fillColors();
        }

        // Function called when color4 pictureBox is clicked
        private void color4_Click(object sender, EventArgs e)
        {
            // If statement checks if the color in pictureBox is the same as color from check string
            if (color4.BackColor == Color.FromName(check))
            {
                // If the color matches, correctAnswer is called
                correctAnswer();
            }
            else
            {
                // If the color is different, wrongAnswer is called
                wrongAnswer();
            }

            // fillColors is called to redraw the game colors
            fillColors();
        }

        // Function called when the color selected is correct
        private void correctAnswer()
        {
            // If statement checks if the file exists before it is imported
            // This makes sure the error "File Not Found" is avoided
            if (File.Exists("myResources\\picSmile.png"))
            {
                // The picResonse is set to the image picSmile with a happy smiley face
                picResponse.BackgroundImage = Image.FromFile("myResources\\picSmile.png");
            }
            // correctCount is increased by 1
            correctCount++;
            // progressBar is moved forward by 10
            progressBar.Increment(10);

            // If statement checks if the correctCount is 10, signifying completion of 1st level
            if(correctCount == 10)
            {
                // MessageBox is shown to the user, letting the user know that first level is complete
                MessageBox.Show("You made it to Level 2!\nYou get new colors to play with!", "Congratulations!!", 
                                 MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                
                // The new colors are stored into the colorString by using new String[]
                colorString = new String[] { "Orange", "Purple", "Pink", "Aqua" };

                // An object of the learnWindow is made and the new colorString is passed to the constructor
                learnWindow objLearnWindow = new learnWindow(colorString);
                // learnWindow form is displayed in modal mode
                objLearnWindow.ShowDialog();
                // Freeing the memory of the object objLearnWindow
                objLearnWindow.Dispose();
                // lblMsg is updated with a new message over the progressBar
                lblMsg.Text = "Fill this up to win the game!";
                // progressBar is reset to 0
                progressBar.Value = 0;
            }
            // else if statement checks if the correctCount is equal to 20
            else if (correctCount == 20)
            {
                // Message box is shown to tell user he/she won the game
                MessageBox.Show("You found my colors!", "You Win!!", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                // If statement displays a message box asking if user wants to play again
                if (MessageBox.Show("Do you want to play again?", "", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                {
                    // For user selection yes, the game is reset

                    // correctCount is reset to 0
                    correctCount = 0;
                    // colorString is reset to original values
                    colorString = new String[] { "Red", "Blue", "Green", "Yellow" };
                    // progressBar is reset to 0
                    progressBar.Value = 0;
                    // An object of the learnWindow is made and the new colorString is passed to the constructor
                    learnWindow objLearnWindow = new learnWindow(colorString);
                    // learnWindow form is displayed in modal mode
                    objLearnWindow.ShowDialog();
                    // Freeing the memory of the object objLearnWindow
                    objLearnWindow.Dispose();
                    // lblMsg is updated to be the same as round 1
                    lblMsg.Text = " Fill this up to get new Colors!";
                    
                    // If statement checks if the file exists before it is imported
                    // This makes sure the error "File Not Found" is avoided
                    if (File.Exists("myResources\\empty.png"))
                    {
                        // The picResonse is set to the image "empty.gif"
                        picResponse.BackgroundImage = Image.FromFile("myResources\\empty.png");
                    }
                }
                else
                {
                    // For user selection no, the game exits
                    
                    // MessageBox is shown notifying the closing of the game
                    MessageBox.Show("Game will now close...\n\nThank you for playing \"Find My Colors\"!!", "Thank you", 
                                            MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                    // Form closing event is called after blnConfirm is set to true, ensuring no confirm exit
                    blnConfirm = true;
                    // Closes this form
                    this.Close();
                }
            }
        }

        // Function called when the color selected is wrong
        private void wrongAnswer()
        {
            // If statement checks if the file exists before it is imported
            // This makes sure the error "File Not Found" is avoided
            if (File.Exists("myResources\\picSad.png"))
            {
                // The picResonse is set to the image picSad with a sad smiley face
                picResponse.BackgroundImage = Image.FromFile("myResources\\picSad.png");
            }
        }

        // ----- Button resize functions -----

        // Function called when mouse is moved over "See All Colors Again" button
        private void btnLearnColors_MouseEnter(object sender, EventArgs e)
        {
            // Width and Height of the btnLearnColors is increased by 4
            btnLearnColors.Width += 4;
            btnLearnColors.Height += 4;
        }

        // Function called when mouse is moved off "See All Colors Again" button
        private void btnLearnColors_MouseLeave(object sender, EventArgs e)
        {
            // Width and Height of the btnLearnColors is decreased by 4
            btnLearnColors.Width -= 4;
            btnLearnColors.Height -= 4;
        }

        // Function called when mouse is moved over "Stop Playing" button
        private void btnQuit_MouseEnter(object sender, EventArgs e)
        {
            // Width and Height of the btnQuit is increased by 4
            btnQuit.Width += 4;
            btnQuit.Height += 4;
        }

        // Function called when mouse is moved off "Stop Playing" button
        private void btnQuit_MouseLeave(object sender, EventArgs e)
        {
            // Width and Height of the btnQuit is decreased by 4
            btnQuit.Width -= 4;
            btnQuit.Height -= 4;
        }
    }
}
